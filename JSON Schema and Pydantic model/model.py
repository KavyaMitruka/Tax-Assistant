# generated by datamodel-codegen:
#   filename:  ITR-1.json
#   timestamp: 2025-02-25T18:41:57+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Extra, Field, conint, constr


class EmployerCategory(Enum):
    CGOV = 'CGOV'
    SGOV = 'SGOV'
    PSU = 'PSU'
    PE = 'PE'
    PESG = 'PESG'
    PEPS = 'PEPS'
    PEO = 'PEO'
    OTH = 'OTH'
    NA = 'NA'


class ReturnFileSec(Enum):
    integer_11 = 11
    integer_12 = 12
    integer_13 = 13
    integer_14 = 14
    integer_16 = 16
    integer_17 = 17
    integer_18 = 18
    integer_20 = 20
    integer_21 = 21


class Clauseiv7provisio139iNature(Enum):
    field_1 = '1'
    field_2 = '2'


class Clauseiv7provisio139iType(BaseModel):
    class Config:
        extra = Extra.forbid

    clauseiv7provisio139iNature: Clauseiv7provisio139iNature = Field(
        ...,
        description='1 - the aggregate of tax deducted at source and tax collected at source during the previous year, in the case of the person, is twenty-five thousand rupees or more(fifty thousand for resident senior citizen); 2 - the deposit in one or more savings bank account of the person, in aggregate, is fifty lakh rupees or more, in the previous year',
    )
    clauseiv7provisio139iAmount: conint(ge=0, le=99999999999999)


class HeadOfInc(BaseModel):
    class Config:
        extra = Extra.forbid

    Salaries: Optional[conint(ge=-99999999999999, le=99999999999999)] = Field(
        None, description='Income from Salary'
    )
    IncomeFromHP: Optional[conint(ge=-99999999999999, le=99999999999999)] = Field(
        None, description='Income from house property'
    )
    IncomeFromBP: Optional[conint(ge=-99999999999999, le=99999999999999)] = Field(
        None, description='Income from Business or Profession'
    )
    IncomeFromCG: Optional[conint(ge=-99999999999999, le=99999999999999)] = Field(
        None, description='Income from Capital Gains'
    )
    IncomeFromOS: Optional[conint(ge=-99999999999999, le=99999999999999)] = Field(
        None, description='Income from Other Sources'
    )
    Total: Optional[conint(ge=-99999999999999, le=99999999999999)] = None


class RelevantClauseUndrDedClaimed(Enum):
    field_80GGA2a = '80GGA2a'
    field_80GGA2aa = '80GGA2aa'
    field_80GGA2b = '80GGA2b'
    field_80GGA2bb = '80GGA2bb'
    field_80GGA2c = '80GGA2c'
    field_80GGA2cc = '80GGA2cc'
    field_80GGA2d = '80GGA2d'
    field_80GGA2e = '80GGA2e'


class CollectedYr(Enum):
    field_2023 = '2023'
    field_2022 = '2022'
    field_2021 = '2021'
    field_2020 = '2020'
    field_2019 = '2019'
    field_2018 = '2018'
    field_2017 = '2017'
    field_2016 = '2016'
    field_2015 = '2015'
    field_2014 = '2014'
    field_2013 = '2013'
    field_2012 = '2012'
    field_2011 = '2011'
    field_2010 = '2010'
    field_2009 = '2009'
    field_2008 = '2008'


class Capacity(Enum):
    S = 'S'
    R = 'R'


class IntrstPay(BaseModel):
    class Config:
        extra = Extra.forbid

    IntrstPayUs234A: conint(ge=0, le=99999999999999)
    IntrstPayUs234B: conint(ge=0, le=99999999999999)
    IntrstPayUs234C: conint(ge=0, le=99999999999999)
    LateFilingFee234F: conint(ge=0, le=5000)


class TaxesPaid(BaseModel):
    class Config:
        extra = Extra.forbid

    AdvanceTax: conint(ge=0, le=99999999999999)
    TDS: conint(ge=0, le=99999999999999)
    TCS: conint(ge=0, le=99999999999999)
    SelfAssessmentTax: conint(ge=0, le=99999999999999)
    TotalTaxesPaid: conint(ge=0, le=99999999999999)


class AccountType(Enum):
    SB = 'SB'
    CA = 'CA'
    CC = 'CC'
    OD = 'OD'
    NRO = 'NRO'
    OTH = 'OTH'


class DeductUndChapVIAType(BaseModel):
    class Config:
        extra = Extra.forbid

    Section80C: conint(ge=0, le=150000)
    Section80CCC: conint(ge=0, le=150000)
    Section80CCDEmployeeOrSE: conint(ge=0, le=150000) = Field(
        ..., description='For Employee/SelfEmployed'
    )
    Section80CCD1B: conint(ge=0, le=50000)
    Section80CCDEmployer: conint(ge=0, le=99999999999999)
    Section80D: conint(ge=0, le=100000)
    Section80DD: conint(ge=0, le=125000)
    Section80DDB: conint(ge=0, le=100000)
    Section80E: conint(ge=0, le=99999999999999)
    Section80EE: conint(ge=0, le=50000)
    Section80EEA: conint(ge=0, le=150000)
    Section80EEB: conint(ge=0, le=150000)
    Section80G: conint(ge=0, le=99999999999999)
    Section80GG: conint(ge=0, le=60000)
    Section80GGA: conint(ge=0, le=99999999999999)
    Section80GGC: conint(ge=0, le=99999999999999)
    Section80U: conint(ge=0, le=125000)
    Section80TTA: conint(ge=0, le=10000)
    Section80TTB: conint(ge=0, le=50000)
    AnyOthSec80CCH: conint(ge=0, le=288000)
    TotalChapVIADeductions: conint(ge=0, le=99999999999999)


class NOT89ACountrycode(Enum):
    US = 'US'
    UK = 'UK'
    CA = 'CA'


class NOT89AType(BaseModel):
    class Config:
        extra = Extra.forbid

    NOT89ACountrycode: NOT89ACountrycode = Field(
        ..., description='US - United States; UK - United Kingdom; CA - Canada'
    )
    NOT89AAmount: conint(ge=0, le=99999999999999)


class DateRange(BaseModel):
    class Config:
        extra = Extra.forbid

    Upto15Of6: conint(ge=0, le=99999999999999)
    Upto15Of9: conint(ge=0, le=99999999999999)
    Up16Of9To15Of12: conint(ge=0, le=99999999999999)
    Up16Of12To15Of3: conint(ge=0, le=99999999999999)
    Up16Of3To31Of3: conint(ge=0, le=99999999999999)


class DateRangeType(BaseModel):
    class Config:
        extra = Extra.forbid

    DateRange: DateRange


class NonEmptyString(BaseModel):
    __root__: constr(
        regex=r'|(\s*([\w\d_=!@#$%\^*\(\){}\[\]\|\\:;\',\.\?/~`\-\+<>&"][\s\w\d_=!@#$%\^*\(\){}\[\]\|\\:;\',\.\?/~`\-\+<>&"]*)\s*)'
    )


class EndWithDigit(BaseModel):
    __root__: constr(regex=r'.*[0-9]')


class CreationInfo(BaseModel):
    class Config:
        extra = Extra.forbid

    SWVersionNo: NonEmptyString
    SWCreatedBy: NonEmptyString
    JSONCreatedBy: NonEmptyString
    JSONCreationDate: constr(
        regex=r'([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))'
    ) = Field(..., description='JSONCreationDate in YYYY-MM-DD format')
    IntermediaryCity: NonEmptyString
    Digest: NonEmptyString


class FormITR1(BaseModel):
    class Config:
        extra = Extra.forbid

    FormName: NonEmptyString
    Description: NonEmptyString
    AssessmentYear: NonEmptyString
    SchemaVer: NonEmptyString
    FormVer: NonEmptyString


class FilingStatus(BaseModel):
    class Config:
        extra = Extra.forbid

    ReturnFileSec: ReturnFileSec = Field(
        ...,
        description='11 : 139(1)-On or before due date, 12 : 139(4)-After due date, 13 : 142(1), 14 : 148,  16 : 153C, 17 : 139(5)-Revised , 18 : 139(9), 20 : 119(2)(b)- after condonation of delay, 21 : 139(8A)',
    )
    OptOutNewTaxRegime: NonEmptyString
    SeventhProvisio139: Optional[NonEmptyString] = None
    IncrExpAggAmt2LkTrvFrgnCntryFlg: Optional[NonEmptyString] = None
    AmtSeventhProvisio139ii: Optional[conint(ge=200000, le=99999999999999)] = None
    IncrExpAggAmt1LkElctrctyPrYrFlg: Optional[NonEmptyString] = None
    AmtSeventhProvisio139iii: Optional[conint(ge=100000, le=99999999999999)] = None
    clauseiv7provisio139i: Optional[NonEmptyString] = None
    clauseiv7provisio139iDtls: Optional[List[Clauseiv7provisio139iType]] = None
    ReceiptNo: Optional[constr(regex=r'[0-9]{15}')] = Field(
        None, description='Enter the Acknowledgement number of the original return.'
    )
    NoticeNo: Optional[NonEmptyString] = None
    OrigRetFiledDate: Optional[
        constr(regex=r'([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))')
    ] = Field(
        None, description='Enter Date of filing of Original return in YYYY-MM-DD format'
    )
    NoticeDateUnderSec: Optional[
        constr(regex=r'([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))')
    ] = Field(None, description='Enter Date of Notice or Order in YYYY-MM-DD format')
    ItrFilingDueDate: NonEmptyString


class Applicable1398A(BaseModel):
    class Config:
        extra = Extra.forbid

    ITRForm: Optional[NonEmptyString] = Field(
        None,
        description='ITR1 - ITR1; ITR2 - ITR2; ITR3 - ITR3; ITR4 - ITR4; ITR5 - ITR5; ITR6 - ITR6; ITR7 - ITR7;',
    )
    AcknowledgementNo: constr(regex=r'[0-9]{15}', max_length=15) = Field(
        ..., description='Enter Acknowledgment No. of Original return'
    )
    OrigRetFiledDate: constr(
        regex=r'([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))'
    ) = Field(
        ..., description='Enter Date of filing of Original return in YYYY-MM-DD format'
    )


class ReasonsForUpdatingIncDtl(BaseModel):
    class Config:
        extra = Extra.forbid

    ReasonsForUpdatingIncome: NonEmptyString = Field(
        ...,
        description='1 - Return previously not filed; 2 -  Income not reported correctly; 3 - Wrong heads of income chosen; 4 - Reduction of carried forward loss; 5 - Reduction of unabsorbed depreciation; 6 - Reduction of tax credit u/s 115JB/115JC; 7 - Wrong rate of tax; OTH-Others',
    )


class UpdatingInc(BaseModel):
    class Config:
        extra = Extra.forbid

    ReasonsForUpdatingIncDtls: Optional[List[ReasonsForUpdatingIncDtl]] = None


class UnabsorbedDepreciationYearDtl(BaseModel):
    class Config:
        extra = Extra.forbid

    UnabsorbedDepreciationYear: NonEmptyString = Field(..., description='2025 ; 2026')
    ReturnFiledEffectFlg: Optional[NonEmptyString] = None
    ReturnType: Optional[NonEmptyString] = Field(
        None,
        description='1 - Orginal Return\xa0139(1)/139(4); 2 -  Revised return; 3 - Updated return',
    )


class UDYear(BaseModel):
    class Config:
        extra = Extra.forbid

    UnabsorbedDepreciationYearDtls: Optional[List[UnabsorbedDepreciationYearDtl]] = None


class ITR1TaxComputation(BaseModel):
    class Config:
        extra = Extra.forbid

    TotalTaxPayable: conint(ge=0, le=99999999999999)
    Rebate87A: conint(ge=0, le=25000)
    TaxPayableOnRebate: conint(ge=0, le=99999999999999)
    EducationCess: conint(ge=0, le=99999999999999)
    GrossTaxLiability: conint(ge=0, le=99999999999999)
    Section89: conint(ge=0, le=99999999999999)
    NetTaxLiability: conint(ge=0, le=99999999999999) = Field(
        ..., description='Balance Tax After Relief'
    )
    TotalIntrstPay: conint(ge=0, le=99999999999999)
    IntrstPay: IntrstPay
    TotTaxPlusIntrstPay: conint(ge=0, le=99999999999999)


class TaxPaid(BaseModel):
    class Config:
        extra = Extra.forbid

    TaxesPaid: TaxesPaid
    BalTaxPayable: conint(ge=0, le=99999999999999)


class ITTaxPayment(BaseModel):
    class Config:
        extra = Extra.forbid

    slno: Optional[conint(ge=0, le=99999999999999)] = None
    BSRCode: NonEmptyString
    DateDep: constr(regex=r'([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))') = Field(
        ..., description='Date in YYYY-MM-DD format  on or after 2022-04-01'
    )
    SrlNoOfChaln: conint(ge=0, le=99999)
    Amt: conint(ge=0, le=99999999999999)


class ITTaxPaymentsInfo(BaseModel):
    class Config:
        extra = Extra.forbid

    ITTaxPayments: Optional[List[ITTaxPayment]] = None


class Schedule80GGCDetail(BaseModel):
    class Config:
        extra = Extra.forbid

    DonationDate: constr(regex=r'([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))') = (
        Field(..., description='Date of Donation in YYYY-MM-DD format')
    )
    DonationAmtCash: conint(ge=0, le=99999999999999)
    DonationAmtOtherMode: conint(ge=0, le=99999999999999)
    TransactionRefNum: Optional[constr(max_length=50)] = None
    IFSCCode: Optional[NonEmptyString] = None
    DonationAmt: conint(ge=0, le=99999999999999)
    EligibleDonationAmt: conint(ge=0, le=99999999999999)


class Schedule80GGC(BaseModel):
    class Config:
        extra = Extra.forbid

    Schedule80GGCDetails: Optional[List[Schedule80GGCDetail]] = None
    TotalDonationAmtCash80GGC: conint(ge=0, le=99999999999999)
    TotalDonationAmtOtherMode80GGC: conint(ge=0, le=99999999999999)
    TotalDonationsUs80GGC: conint(ge=0, le=99999999999999)
    TotalEligibleDonationAmt80GGC: conint(ge=0, le=99999999999999)


class Sec80DSelfFamSrCtznHealth(BaseModel):
    class Config:
        extra = Extra.forbid

    SeniorCitizenFlag: NonEmptyString = Field(
        ..., description='Y - Yes; N - No; S - Not claiming for Self/ Family'
    )
    SelfAndFamily: Optional[conint(ge=0, le=25000)] = None
    HealthInsPremSlfFam: Optional[conint(ge=0, le=99999999999999)] = None
    PrevHlthChckUpSlfFam: Optional[conint(ge=0, le=5000)] = None
    SelfAndFamilySeniorCitizen: Optional[conint(ge=0, le=50000)] = None
    HlthInsPremSlfFamSrCtzn: Optional[conint(ge=0, le=99999999999999)] = None
    PrevHlthChckUpSlfFamSrCtzn: Optional[conint(ge=0, le=5000)] = None
    MedicalExpSlfFamSrCtzn: Optional[conint(ge=0, le=99999999999999)] = None
    ParentsSeniorCitizenFlag: NonEmptyString = Field(
        ..., description='Y - Yes; N - No; P - Not claiming for Parents'
    )
    Parents: Optional[conint(ge=0, le=25000)] = None
    HlthInsPremParents: Optional[conint(ge=0, le=99999999999999)] = None
    PrevHlthChckUpParents: Optional[conint(ge=0, le=5000)] = None
    ParentsSeniorCitizen: Optional[conint(ge=0, le=50000)] = None
    HlthInsPremParentsSrCtzn: Optional[conint(ge=0, le=99999999999999)] = None
    PrevHlthChckUpParentsSrCtzn: Optional[conint(ge=0, le=5000)] = None
    MedicalExpParentsSrCtzn: Optional[conint(ge=0, le=99999999999999)] = None
    EligibleAmountOfDedn: conint(ge=0, le=100000)


class Schedule80D(BaseModel):
    class Config:
        extra = Extra.forbid

    Sec80DSelfFamSrCtznHealth: Sec80DSelfFamSrCtznHealth


class Schedule80DD(BaseModel):
    class Config:
        extra = Extra.forbid

    NatureOfDisability: NonEmptyString = Field(
        ...,
        description='1 : Dependent person with disability  ; 2 : Dependent person with severe disability',
    )
    DeductionAmount: conint(ge=0, le=99999999999999)
    DependentType: NonEmptyString = Field(
        ...,
        description='1. Spouse; 2. Son; 3. Daughter; 4. Father; 5. Mother; 6. Brother; 7. Sister;',
    )
    DependentPan: Optional[NonEmptyString] = None
    DependentAadhaar: Optional[NonEmptyString] = None
    Form10IAFilingDate: Optional[
        constr(regex=r'([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))')
    ] = None
    Form10IAAckNum: Optional[constr(max_length=15)] = None
    UDIDNum: Optional[constr(max_length=18)] = None


class Schedule80U(BaseModel):
    class Config:
        extra = Extra.forbid

    NatureOfDisability: NonEmptyString = Field(
        ..., description='1 : Self with disability  ; 2 : Self with severe disability'
    )
    DeductionAmount: conint(ge=0, le=99999999999999)
    Form10IAFilingDate: Optional[
        constr(regex=r'([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))')
    ] = None
    Form10IAAckNum: Optional[constr(max_length=15)] = None
    UDIDNum: Optional[constr(max_length=18)] = None


class Declaration(BaseModel):
    class Config:
        extra = Extra.forbid

    AssesseeVerName: NonEmptyString
    FatherName: NonEmptyString
    AssesseeVerPAN: NonEmptyString


class Verification(BaseModel):
    class Config:
        extra = Extra.forbid

    Declaration: Declaration
    Capacity: Capacity = Field(..., description='S : Self ; R : Representative')
    Place: NonEmptyString


class TaxReturnPreparer(BaseModel):
    class Config:
        extra = Extra.forbid

    IdentificationNoOfTRP: NonEmptyString
    NameOfTRP: NonEmptyString
    ReImbFrmGov: Optional[conint(ge=0, le=99999999999999)] = None


class AssesseeName(BaseModel):
    class Config:
        extra = Extra.forbid

    FirstName: Optional[NonEmptyString] = None
    MiddleName: Optional[NonEmptyString] = None
    SurNameOrOrgName: NonEmptyString = Field(
        ..., description='Enter Last or Sur name for Individual name here'
    )


class TDS3Details(BaseModel):
    class Config:
        extra = Extra.forbid

    PANofTenant: NonEmptyString
    AadhaarofTenant: Optional[NonEmptyString] = None
    NameOfTenant: NonEmptyString
    GrsRcptToTaxDeduct: conint(ge=0, le=99999999999999)
    DeductedYr: NonEmptyString = Field(
        ...,
        description='2023:2023-24; 2022:2022-23; 2021:2021-22; 2020:2020-21; 2019:2019-20; 2018:2018-19; 2017:2017-18;',
    )
    TDSDeducted: conint(ge=0, le=99999999999999)
    TDSClaimed: conint(ge=0, le=99999999999999)


class TaxPayment(BaseModel):
    class Config:
        extra = Extra.forbid

    BSRCode: NonEmptyString
    DateDep: constr(regex=r'([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))') = Field(
        ...,
        description='Date of deposit should be on or after 2023-04-01  in YYYY-MM-DD format',
    )
    SrlNoOfChaln: conint(ge=0, le=99999)
    Amt: conint(ge=0, le=99999999999999)


class AddressDetail(BaseModel):
    class Config:
        extra = Extra.forbid

    AddrDetail: NonEmptyString
    CityOrTownOrDistrict: NonEmptyString
    StateCode: NonEmptyString = Field(
        ...,
        description='01-Andaman and Nicobar islands; 02-Andhra Pradesh; 03-Arunachal Pradesh; 04-Assam; 05-Bihar; 06-Chandigarh; 07-Dadra Nagar and Haveli; 08-Daman and Diu; 09- Delhi; 10- Goa; 11-Gujarat; 12- Haryana; 13- Himachal Pradesh; 14-Jammu and Kashmir; 15- Karnataka; 16- Kerala; 17- Lakshadweep; 18-Madhya Pradesh; 19-Maharashtra; 20-Manipur; 21-meghalaya; 22-Mizoram; 23-Nagaland; 24- Odisha; 25- Puducherry; 26- Punjab; 27-Rajasthan; 28- Sikkim; 29-Tamil Nadu; 30- Tripura; 31-Uttar Pradesh; 32- West Bengal; 33- Chhattisgarh; 34- Uttarakhand; 35- Jharkhand; 36- Telangana; 37- Ladakh',
    )
    PinCode: conint(ge=100000, le=999999)


class EmployerOrDeductorOrCollectDetl(BaseModel):
    class Config:
        extra = Extra.forbid

    TAN: NonEmptyString
    EmployerOrDeductorOrCollecterName: NonEmptyString


class CountryCode(BaseModel):
    pass


class UsrDeductUndChapVIAType(BaseModel):
    class Config:
        extra = Extra.forbid

    Section80C: conint(ge=0, le=99999999999999)
    Section80CCC: conint(ge=0, le=99999999999999)
    Section80CCDEmployeeOrSE: conint(ge=0, le=99999999999999) = Field(
        ..., description='For Employee/SelfEmployed'
    )
    Section80CCD1B: conint(ge=0, le=99999999999999)
    Section80CCDEmployer: conint(ge=0, le=99999999999999)
    Section80D: conint(ge=0, le=99999999999999)
    Section80DD: conint(ge=0, le=99999999999999)
    Section80DDBUsrType: Optional[NonEmptyString] = Field(
        None,
        description='1 : Self or dependent ; 2 : Self or Dependent - Senior Citizen',
    )
    Section80DDB: conint(ge=0, le=99999999999999)
    Section80E: conint(ge=0, le=99999999999999)
    Section80EE: conint(ge=0, le=99999999999999)
    Section80EEA: Optional[conint(ge=0, le=99999999999999)] = None
    Section80EEB: Optional[conint(ge=0, le=99999999999999)] = None
    Section80G: conint(ge=0, le=99999999999999)
    Section80GG: conint(ge=0, le=99999999999999)
    Section80GGA: conint(ge=0, le=99999999999999)
    Section80GGC: conint(ge=0, le=99999999999999)
    Section80U: conint(ge=0, le=99999999999999)
    Section80TTA: conint(ge=0, le=99999999999999)
    Section80TTB: conint(ge=0, le=99999999999999)
    AnyOthSec80CCH: conint(ge=0, le=99999999999999)
    TotalChapVIADeductions: conint(ge=0, le=99999999999999)


class AllwncExemptUs10DtlsType(BaseModel):
    class Config:
        extra = Extra.forbid

    SalNatureDesc: NonEmptyString = Field(
        ...,
        description='10(5) - Sec 10(5)-Leave Travel concession/assistance; 10(6) - Sec 10(6)-Remuneration received as an official, by whatever name called, of an embassy, high commission etc.; 10(7) - Sec 10(7)-Allowances or perquisites paid or allowed as such outside India by the Government to a citizen of India for rendering service outside India; 10(10) - Sec 10(10)-Death-cum-retirement gratuity received ; 10(10A) - Sec 10(10A)-Commuted value of pension received; 10(10AA) - Sec 10(10AA)-Earned leave encashment on Retirement; 10(10B)(i) - Sec 10(10B)-First proviso - Compensation limit notified by CG in the Official Gazette; 10(10B)(ii) - Sec 10(10B)-Second proviso - Compensation under scheme approved by the Central Government; 10(10C) - Sec 10(10C)- Amount received/receivable on voluntary retirement or termination of service; 10(10CC) - Sec 10(10CC)-Tax paid by employer on non-monetary perquisite; 10(13A) - Sec 10(13A)-Allowance to meet expenditure incurred on house rent; 10(14)(i) - Sec 10(14)(i)- Prescribed Allowances or benefits (not in a nature of perquisite) specifically granted to meet expenses wholly, necessarily and exclusively and to the extent actually incurred, in performance of duties of office or employment; 10(14)(ii) - Sec 10(14)(ii) -Prescribed Allowances or benefits granted to meet personal expenses in performance of duties of office or employment or to compensate him for increased cost of living. ; 10(14)(i)(115BAC) - Sec 10(14)(i) -Allowances referred in sub-clauses (a) to (c) of sub-rule (1) in Rule 2BB ; 10(14)(ii)(115BAC) - Sec 10(14)(ii) -Transport allowance granted to certain physically handicapped assessee ; EIC - Exempt income received by a judge covered under the payment of salaries to Supreme Court/High Court judges Act /Rules ; OTH - Any Other',
    )
    SalOthNatOfInc: Optional[NonEmptyString] = None
    SalOthAmount: conint(ge=0, le=99999999999999)


class OtherSourceIncome(BaseModel):
    class Config:
        extra = Extra.forbid

    OthSrcNatureDesc: NonEmptyString = Field(
        ...,
        description='SAV : Interest from Saving Account; IFD : Interest from Deposit(Bank/Post Office/Cooperative Society); TAX : Interest from Income Tax Refund; FAP : Family pension; DIV : Dividend; 10(11)(iP) : Interest accrued on contributions to provident fund to the extent taxable as per first proviso to section 10(11); 10(11)(iiP) : Interest accrued on contributions to provident fund to the extent taxable as per second proviso to section 10(11); 10(12)(iP) : Interest accrued on contributions to provident fund to the extent taxable as per first proviso to section 10(12); 10(12)(iiP) : Interest accrued on contributions to provident fund to the extent taxable as per second proviso to section 10(12); NOT89A : Income from retirement benefit account maintained in a notified country u/s 89A ; OTHNOT89A : Income from retirement benefit account maintained in a country other than a country notified u/s 89A ; OTH : Any Other',
    )
    NOT89A: Optional[List[NOT89AType]] = None
    OthSrcOthNatOfInc: Optional[NonEmptyString] = None
    OthSrcOthAmount: conint(ge=0, le=99999999999999)
    DividendInc: Optional[DateRangeType] = None
    NOT89AInc: Optional[DateRangeType] = None


class ExemptIncAgriOthUs10Type(BaseModel):
    class Config:
        extra = Extra.forbid

    NatureDesc: NonEmptyString = Field(
        ...,
        description='AGRI : Agriculture Income (= Rs.5000); 10(10BC): Sec 10(10BC)-Any amount from the Central/State Govt./local authority by way of compensation on account of any disaster; 10(10D) : Sec 10(10D)- Any sum received under a life insurance policy, including the sum allocated by way of bonus on such policy except sum as mentioned in sub-clause (a) to (d) of Sec.10(10D); 10(11) : Sec 10(11)-Statuory Provident Fund received; 10(12) : Sec 10(12)-Recognised Provident Fund received;10(12C) : Sec 10(12C)-Any payment from the Agniveer Corpus Fund to a person enrolled under the Agnipath Scheme, or to his nominee.; 10(13) : Sec 10(13)-Approved superannuation fund received; 10(16) : Sec 10(16)-Scholarships granted to meet the cost of education; 10(17) : Sec 10(17)-Allowance MP/MLA/MLC; 10(17A) : Sec 10(17A)-Award instituted by Government; 10(18) : Sec 10(18)-Pension received by winner of "Param Vir Chakra" or "Maha Vir Chakra" or "Vir Chakra" or such other gallantry award; DMDP : Defense medical disability pension; 10(19) : Sec 10(19)-Armed Forces Family pension in case of death during operational duty; 10(26) : Sec 10(26)-Any income as referred to in section 10(26); 10(26AAA): Sec 10(26AAA)-Any income as referred to in section 10(26AAA) ; OTH : Any Other',
    )
    OthNatOfInc: Optional[NonEmptyString] = None
    OthAmount: conint(ge=0, le=99999999999999)


class NonZeroString(BaseModel):
    pass


class RetrntoRedCarriedFL(BaseModel):
    class Config:
        extra = Extra.forbid

    UnabsorbedDepreciation: NonEmptyString
    UDYear: Optional[UDYear] = None


class PartA1398A(BaseModel):
    class Config:
        extra = Extra.forbid

    PAN: NonEmptyString
    Name: NonEmptyString
    AadhaarCardNo: Optional[NonEmptyString] = None
    AadhaarEnrolmentId: Optional[NonEmptyString] = None
    AssessmentYear: NonEmptyString
    PreviouslyFiledForThisAY: NonEmptyString
    PreviouslyFiledForThisAY_139_8A: Optional[NonEmptyString] = Field(
        None, description='1 - 139(1); 2 - Other'
    )
    Applicable_139_8A: Optional[Applicable1398A] = None
    LaidOutIn_139_8A: NonEmptyString
    ITRFormUpdatingInc: NonEmptyString = Field(..., description='ITR1 - ITR1')
    UpdatingInc: Optional[UpdatingInc] = None
    UpdatedReturnDuringPeriod: NonEmptyString = Field(
        ...,
        description='1 - Up to 12 months from the end of Relevant Assessment Year; 2 -  Between 12 to 24 Months from the end of Relevant Assessment  Year',
    )
    RetrntoRedCarriedFL: Optional[RetrntoRedCarriedFL] = None


class AllwncExemptUs10(BaseModel):
    class Config:
        extra = Extra.forbid

    AllwncExemptUs10Dtls: Optional[List[AllwncExemptUs10DtlsType]] = None
    TotalAllwncExemptUs10: conint(ge=0, le=99999999999999)


class OthersInc(BaseModel):
    class Config:
        extra = Extra.forbid

    OthersIncDtlsOthSrc: Optional[List[OtherSourceIncome]] = None


class ExemptIncAgriOthUs10(BaseModel):
    class Config:
        extra = Extra.forbid

    ExemptIncAgriOthUs10Dtls: Optional[List[ExemptIncAgriOthUs10Type]] = None
    ExemptIncAgriOthUs10Total: conint(ge=0, le=99999999999999)


class ITR1IncomeDeductions(BaseModel):
    class Config:
        extra = Extra.forbid

    GrossSalary: conint(ge=0, le=99999999999999)
    Salary: Optional[conint(ge=0, le=99999999999999)] = None
    PerquisitesValue: Optional[conint(ge=0, le=99999999999999)] = None
    ProfitsInSalary: Optional[conint(ge=0, le=99999999999999)] = None
    IncomeNotified89A: conint(ge=0, le=99999999999999)
    IncomeNotified89AType: Optional[List[NOT89AType]] = None
    IncomeNotifiedOther89A: Optional[conint(ge=0, le=99999999999999)] = None
    AllwncExemptUs10: Optional[AllwncExemptUs10] = None
    Increliefus89A: Optional[conint(ge=0, le=99999999999999)] = None
    NetSalary: conint(ge=0, le=99999999999999)
    DeductionUs16: conint(ge=0, le=99999999999999)
    DeductionUs16ia: Optional[conint(ge=0, le=50000)] = None
    EntertainmentAlw16ii: Optional[conint(ge=0, le=5000)] = None
    ProfessionalTaxUs16iii: Optional[conint(ge=0, le=5000)] = None
    IncomeFromSal: conint(ge=0, le=99999999999999)
    TypeOfHP: Optional[NonEmptyString] = Field(
        None,
        description='House Property income Type - S:Self Occupied; L:Let Out; D:Deemed let out',
    )
    GrossRentReceived: Optional[conint(ge=0, le=99999999999999)] = None
    TaxPaidlocalAuth: Optional[conint(ge=0, le=99999999999999)] = None
    AnnualValue: conint(ge=0, le=99999999999999)
    StandardDeduction: conint(ge=0, le=99999999999999) = Field(
        ..., description='This field refers to Part-B B2 iv - 30% of Annual Value'
    )
    InterestPayable: Optional[conint(ge=0, le=99999999999999)] = None
    ArrearsUnrealizedRentRcvd: Optional[conint(ge=0, le=99999999999999)] = None
    TotalIncomeOfHP: conint(ge=-200000) = Field(
        ..., description='House Property income'
    )
    IncomeOthSrc: conint(ge=0, le=99999999999999)
    OthersInc: Optional[OthersInc] = None
    DeductionUs57iia: Optional[conint(ge=0, le=15000)] = None
    Increliefus89AOS: Optional[conint(ge=0, le=99999999999999)] = None
    GrossTotIncome: conint(le=99999999999999)
    UsrDeductUndChapVIA: UsrDeductUndChapVIAType
    DeductUndChapVIA: DeductUndChapVIAType
    TotalIncome: conint(ge=0, le=5000000)
    ExemptIncAgriOthUs10: Optional[ExemptIncAgriOthUs10] = None


class ScheduleIT1(BaseModel):
    class Config:
        extra = Extra.forbid

    TaxPayment1: Optional[ITTaxPaymentsInfo] = None
    Total: conint(ge=0, le=99999999999999)


class ScheduleIT2(BaseModel):
    class Config:
        extra = Extra.forbid

    TaxPayment2: Optional[ITTaxPaymentsInfo] = None
    Total: conint(ge=0, le=99999999999999)


class PartBATI(BaseModel):
    class Config:
        extra = Extra.forbid

    HeadOfInc: Optional[HeadOfInc] = None
    LatestTotInc: Optional[conint(ge=0, le=99999999999999)] = None
    UpdatedTotInc: conint(ge=0, le=99999999999999)
    AmtPayable: conint(ge=0, le=99999999999999)
    AmtRefundable: Optional[conint(ge=0, le=99999999999999)] = None
    LastAmtPayable: Optional[conint(ge=0, le=99999999999999)] = None
    Refund: Optional[conint(ge=0, le=99999999999999)] = None
    TotRefund: Optional[conint(ge=0, le=99999999999999)] = None
    FeeIncUS234F: conint(ge=0, le=5000)
    RegAssessementTAX: Optional[conint(ge=0, le=99999999999999)] = None
    AggrLiabilityRefund: conint(ge=0, le=99999999999999)
    AggrLiabilityNoRefund: conint(ge=0, le=99999999999999)
    AddtnlIncTax: conint(ge=0, le=99999999999999)
    NetPayable: conint(ge=0, le=99999999999999)
    TaxUS140B: conint(ge=0, le=99999999999999)
    TaxDue10_11: conint(ge=0, le=99999999999999)
    ScheduleIT1: Optional[ScheduleIT1] = Field(
        None, description='Details of payments of tax on updated return u/s 140B'
    )
    ScheduleIT2: Optional[ScheduleIT2] = Field(
        None,
        description='Details of payments of Advance Tax or Self Assessment Tax or Regular Assessment Tax, credit for which has not been claimed in the earlier return (credit for the same is not to be allowed again under section 140B(2))',
    )
    ReleifUS89: conint(ge=0, le=99999999999999)


class DonationDtlsSciRsrchRuralDevItem(BaseModel):
    class Config:
        extra = Extra.forbid

    RelevantClauseUndrDedClaimed: RelevantClauseUndrDedClaimed = Field(
        ...,
        description='80GGA(2)(a) - Sum paid to Research Association or University, college or other institution for Scientific Research; 80GGA(2)(aa) - Sum paid to Research Association or University, college or other institution for Social science or Statistical Research; 80GGA(2)(b) - Sum paid to an association or institution for Rural Development; 80GGA(2)(bb) - Sum paid to PSU or Local Authority or an association or institution approved by the National Committee for carrying out any eligible project; 80GGA(2)(c) - Sum paid to an association or institution for Conservation of Natural Resources or for afforestation; 80GGA(2)(cc) - Sum paid for Afforestation, to the funds, which are notified by Central Govt.; 80GGA(2)(d) - Sum paid for Rural Development to the funds, which are notified by Central Govt.; 80GGA(2)(e) - Sum paid to National Urban Poverty Eradication Fund as setup and notified by Central Govt.',
    )
    NameOfDonee: NonEmptyString
    AddressDetail: AddressDetail
    DoneePAN: NonEmptyString
    DonationAmtCash: conint(ge=0, le=99999999999999)
    DonationAmtOtherMode: conint(ge=0, le=99999999999999)
    DonationAmt: conint(ge=0, le=99999999999999)
    EligibleDonationAmt: conint(ge=0, le=99999999999999)


class Schedule80GGA(BaseModel):
    class Config:
        extra = Extra.forbid

    DonationDtlsSciRsrchRuralDev: Optional[List[DonationDtlsSciRsrchRuralDevItem]] = (
        None
    )
    TotalDonationAmtCash80GGA: conint(ge=0, le=99999999999999)
    TotalDonationAmtOtherMode80GGA: conint(ge=0, le=99999999999999)
    TotalDonationsUs80GGA: conint(ge=0, le=99999999999999)
    TotalEligibleDonationAmt80GGA: conint(ge=0, le=99999999999999)


class ScheduleTDS3Dtls(BaseModel):
    class Config:
        extra = Extra.forbid

    TDS3Details: Optional[List[TDS3Details]] = Field(None, min_items=1)
    TotalTDS3Details: conint(ge=0, le=99999999999999)


class TC(BaseModel):
    class Config:
        extra = Extra.forbid

    EmployerOrDeductorOrCollectDetl: EmployerOrDeductorOrCollectDetl
    AmtTaxCollected: conint(ge=0, le=99999999999999)
    CollectedYr: CollectedYr = Field(
        ...,
        description='2023: 2023-24; 2022: 2022-23; 2021: 2021-22; 2020: 2020-21; 2019: 2019-20; 2018: 2018-19; 2017: 2017-18; 2016: 2016-17; 2015: 2015-16; 2014: 2014-15; 2013: 2013-14; 2012: 2012-13; 2011: 2011-12; 2010: 2010-11; 2009: 2009-10; 2008: 2008-09',
    )
    TotalTCS: conint(ge=0, le=99999999999999)
    AmtTCSClaimedThisYear: conint(ge=0, le=99999999999999) = Field(
        ..., description='Amount out of (5) claimed for this year'
    )


class ScheduleTCS(BaseModel):
    class Config:
        extra = Extra.forbid

    TCS: Optional[List[TC]] = Field(None, min_items=1)
    TotalSchTCS: conint(ge=0, le=99999999999999)


class TaxPayments(BaseModel):
    class Config:
        extra = Extra.forbid

    TaxPayment: Optional[List[TaxPayment]] = Field(None, min_items=1)
    TotalTaxPayments: conint(ge=0, le=99999999999999)


class Address(BaseModel):
    class Config:
        extra = Extra.forbid

    ResidenceNo: NonEmptyString
    ResidenceName: Optional[NonEmptyString] = None
    RoadOrStreet: Optional[NonEmptyString] = None
    LocalityOrArea: NonEmptyString
    CityOrTownOrDistrict: NonEmptyString
    StateCode: NonEmptyString = Field(
        ...,
        description='01-Andaman and Nicobar islands; 02-Andhra Pradesh; 03-Arunachal Pradesh; 04-Assam; 05-Bihar; 06-Chandigarh; 07-Dadra Nagar and Haveli; 08-Daman and Diu; 09- Delhi; 10- Goa; 11-Gujarat; 12- Haryana; 13- Himachal Pradesh; 14-Jammu and Kashmir; 15- Karnataka; 16- Kerala; 17- Lakshadweep; 18-Madhya Pradesh; 19-Maharashtra; 20-Manipur; 21-meghalaya; 22-Mizoram; 23-Nagaland; 24- Odisha; 25- Puducherry; 26- Punjab; 27-Rajasthan; 28- Sikkim; 29-Tamil Nadu; 30- Tripura; 31-Uttar Pradesh; 32- West Bengal; 33- Chhattisgarh; 34- Uttarakhand; 35- Jharkhand; 36- Telangana; 37- Ladakh; 99-Foreign',
    )
    CountryCode: CountryCode
    PinCode: Optional[int] = None
    ZipCode: Optional[NonEmptyString] = None
    CountryCodeMobile: int
    MobileNo: int
    EmailAddress: NonEmptyString


class DoneeWithPan(BaseModel):
    class Config:
        extra = Extra.forbid

    DoneeWithPanName: NonEmptyString
    DoneePAN: NonEmptyString
    ArnNbr: Optional[NonEmptyString] = Field(
        None, description='Please enter ARN (Donation reference Number)'
    )
    AddressDetail: AddressDetail
    DonationAmtCash: conint(ge=0, le=99999999999999)
    DonationAmtOtherMode: conint(ge=0, le=99999999999999)
    DonationAmt: conint(ge=0, le=99999999999999)
    EligibleDonationAmt: conint(ge=0, le=99999999999999)


class TDSonSalary(BaseModel):
    class Config:
        extra = Extra.forbid

    EmployerOrDeductorOrCollectDetl: EmployerOrDeductorOrCollectDetl
    IncChrgSal: conint(ge=0, le=99999999999999)
    TotalTDSSal: conint(ge=0, le=99999999999999)


class TDSonOthThanSal(BaseModel):
    class Config:
        extra = Extra.forbid

    EmployerOrDeductorOrCollectDetl: EmployerOrDeductorOrCollectDetl
    AmtForTaxDeduct: conint(ge=0, le=99999999999999)
    DeductedYr: NonEmptyString = Field(
        ...,
        description='2023: 2023-24; 2022: 2022-23; 2021: 2021-22; 2020: 2020-21; 2019: 2019-20; 2018: 2018-19; 2017: 2017-18; 2016: 2016-17; 2015: 2015-16; 2014: 2014-15; 2013: 2013-14; 2012: 2012-13; 2011: 2011-12; 2010: 2010-11; 2009: 2009-10; 2008: 2008-09',
    )
    TotTDSOnAmtPaid: conint(ge=0, le=99999999999999)
    ClaimOutOfTotTDSOnAmtPaid: conint(ge=0, le=99999999999999)


class BankDetailType(BaseModel):
    class Config:
        extra = Extra.forbid

    IFSCCode: NonEmptyString
    BankName: NonEmptyString
    BankAccountNo: NonZeroString
    AccountType: AccountType = Field(
        ...,
        description='SB: Savings Account, CA: Current Account,CC: Cash Credit Account, OD: Over draft account, NRO: Non Resident Account, OTH: Other',
    )


class PersonalInfo(BaseModel):
    class Config:
        extra = Extra.forbid

    AssesseeName: AssesseeName
    PAN: NonEmptyString
    Address: Address
    DOB: constr(regex=r'([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))') = Field(
        ...,
        description='Date of Birth of the Assessee format YYYY-MM-DD; maximimum date allowed 2024-03-31',
    )
    EmployerCategory: EmployerCategory = Field(
        ...,
        description='CGOV:Central Government, SGOV:State Government, PSU:Public Sector Unit, PE:Pensioners - Central Government, PESG:Pensioners - State Government, PEPS:Pensioners - Public sector undertaking, PEO:Pensioners - Others, OTH:Others, NA:Not Applicable',
    )
    AadhaarCardNo: Optional[NonEmptyString] = None
    AadhaarEnrolmentId: Optional[NonEmptyString] = None


class Don100Percent(BaseModel):
    class Config:
        extra = Extra.forbid

    DoneeWithPan: Optional[List[DoneeWithPan]] = Field(None, min_items=1)
    TotDon100PercentCash: conint(ge=0, le=99999999999999)
    TotDon100PercentOtherMode: conint(ge=0, le=99999999999999)
    TotDon100Percent: conint(ge=0, le=99999999999999)
    TotEligibleDon100Percent: conint(ge=0, le=99999999999999)


class Don50PercentNoApprReqd(BaseModel):
    class Config:
        extra = Extra.forbid

    DoneeWithPan: Optional[List[DoneeWithPan]] = Field(None, min_items=1)
    TotDon50PercentNoApprReqdCash: conint(ge=0, le=99999999999999)
    TotDon50PercentNoApprReqdOtherMode: conint(ge=0, le=99999999999999)
    TotDon50PercentNoApprReqd: conint(ge=0, le=99999999999999)
    TotEligibleDon50Percent: conint(ge=0, le=99999999999999)


class Don100PercentApprReqd(BaseModel):
    class Config:
        extra = Extra.forbid

    DoneeWithPan: Optional[List[DoneeWithPan]] = Field(None, min_items=1)
    TotDon100PercentApprReqdCash: conint(ge=0, le=99999999999999)
    TotDon100PercentApprReqdOtherMode: conint(ge=0, le=99999999999999)
    TotDon100PercentApprReqd: conint(ge=0, le=99999999999999)
    TotEligibleDon100PercentApprReqd: conint(ge=0, le=99999999999999)


class Don50PercentApprReqd(BaseModel):
    class Config:
        extra = Extra.forbid

    DoneeWithPan: Optional[List[DoneeWithPan]] = Field(None, min_items=1)
    TotDon50PercentApprReqdCash: conint(ge=0, le=99999999999999)
    TotDon50PercentApprReqdOtherMode: conint(ge=0, le=99999999999999)
    TotDon50PercentApprReqd: conint(ge=0, le=99999999999999)
    TotEligibleDon50PercentApprReqd: conint(ge=0, le=99999999999999)


class Schedule80G(BaseModel):
    class Config:
        extra = Extra.forbid

    Don100Percent: Optional[Don100Percent] = None
    Don50PercentNoApprReqd: Optional[Don50PercentNoApprReqd] = None
    Don100PercentApprReqd: Optional[Don100PercentApprReqd] = None
    Don50PercentApprReqd: Optional[Don50PercentApprReqd] = None
    TotalDonationsUs80GCash: conint(ge=0, le=99999999999999)
    TotalDonationsUs80GOtherMode: conint(ge=0, le=99999999999999)
    TotalDonationsUs80G: conint(ge=0, le=99999999999999)
    TotalEligibleDonationsUs80G: conint(ge=0, le=99999999999999)


class TDSonSalaries(BaseModel):
    class Config:
        extra = Extra.forbid

    TDSonSalary: Optional[List[TDSonSalary]] = Field(None, min_items=1)
    TotalTDSonSalaries: conint(ge=0, le=99999999999999)


class TDSonOthThanSals(BaseModel):
    class Config:
        extra = Extra.forbid

    TDSonOthThanSal: Optional[List[TDSonOthThanSal]] = Field(None, min_items=1)
    TotalTDSonOthThanSals: conint(ge=0, le=99999999999999)


class BankAccountDtls(BaseModel):
    class Config:
        extra = Extra.forbid

    AddtnlBankDetails: Optional[List[BankDetailType]] = Field(None, min_items=1)


class Refund(BaseModel):
    class Config:
        extra = Extra.forbid

    RefundDue: conint(ge=0, le=99999999999999) = Field(
        ...,
        description='Refund due if Total Taxes Paid is greater than AggregateTaxInterest',
    )
    BankAccountDtls: BankAccountDtls


class ITR1(BaseModel):
    class Config:
        extra = Extra.forbid

    CreationInfo: CreationInfo
    Form_ITR1: FormITR1
    PersonalInfo: PersonalInfo
    FilingStatus: FilingStatus
    PartA_139_8A: Optional[PartA1398A] = None
    ITR1_IncomeDeductions: ITR1IncomeDeductions
    ITR1_TaxComputation: ITR1TaxComputation
    TaxPaid: TaxPaid
    Refund: Refund
    PartB_ATI: Optional[PartBATI] = Field(None, alias='PartB-ATI')
    Schedule80G: Optional[Schedule80G] = None
    Schedule80GGA: Optional[Schedule80GGA] = None
    Schedule80GGC: Optional[Schedule80GGC] = None
    Schedule80D: Optional[Schedule80D] = None
    Schedule80DD: Optional[Schedule80DD] = None
    Schedule80U: Optional[Schedule80U] = None
    TDSonSalaries: Optional[TDSonSalaries] = None
    TDSonOthThanSals: Optional[TDSonOthThanSals] = None
    ScheduleTDS3Dtls: Optional[ScheduleTDS3Dtls] = None
    ScheduleTCS: Optional[ScheduleTCS] = None
    TaxPayments: Optional[TaxPayments] = None
    Verification: Verification
    TaxReturnPreparer: Optional[TaxReturnPreparer] = None


class ITR(BaseModel):
    class Config:
        extra = Extra.forbid

    ITR1: ITR1


class Model(BaseModel):
    class Config:
        extra = Extra.forbid

    ITR: Optional[ITR] = None
